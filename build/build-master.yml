stages:
- stage: BuildLibrary
  jobs:
  - job: BuildLibrary
    pool:
        name: Hosted macOS
        vmImage: 'macOS-latest'
        demands:
        - MSBuild
        - Xamarin.Android
        - xcode
        - Xamarin.iOS
        - msbuild

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: $(DotNetVersion)

    - task: Bash@3
      displayName: Set Mono Version $(MonoVersion)
      inputs:
        targetType: 'inline'
        script: 'sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(MonoVersion)'
    
    - task: NuGetToolInstaller@1
      displayName: Use Nuget $(NugetVersion)
      inputs:
        versionSpec: $(NugetVersion)

    - task: NuGetCommand@2
      displayName: 'NuGet restore MobCAT.sln'
      inputs:
        command: 'restore'
        restoreSolution: 'MobCAT.sln'

    - task: MSBuild@1
      displayName: 'Build MobCAT'
      inputs:
        solution: 'MobCAT/MobCAT.csproj'
        configuration: '$(BuildConfiguration)'

    - task: MSBuild@1
      displayName: 'Build MobCAT.Forms'
      inputs:
        solution: 'MobCAT.Forms/MobCAT.Forms.csproj'
        configuration: '$(BuildConfiguration)'

    - task: MSBuild@1
      displayName: 'Build MobCAT.Android'
      inputs:
        solution: 'MobCAT.Android/MobCAT.Android.csproj'
        configuration: '$(BuildConfiguration)'

    - task: CopyFiles@2
      inputs:
        Contents: 'MobCAT.Android/bin/Release/*'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: MSBuild@1
      displayName: 'Build MobCAT.iOS'
      inputs:
        solution: 'MobCAT.iOS/MobCAT.iOS.csproj'
        configuration: '$(BuildConfiguration)'

    - task: CopyFiles@2
      inputs:
        Contents: 'MobCAT.iOS/bin/Release/*'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: MSBuild@1
      displayName: 'Build MobCAT.Repository.EntityFrameworkCore'
      inputs:
        solution: 'MobCAT.Repository.EntityFrameworkCore/MobCAT.Repository.EntityFrameworkCore.csproj'
        configuration: '$(BuildConfiguration)'

    - task: MSBuild@1
      displayName: 'Build MobCAT.Repository.SQLiteNet'
      inputs:
        solution: 'MobCAT.Repository.SQLiteNet/MobCAT.Repository.SQLiteNet.csproj'
        configuration: '$(BuildConfiguration)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop_mac'
        publishLocation: 'Container'

- stage: RunTests
  jobs:
  - job: RunMobCATTests
    displayName: Run MobCAT Tests
    pool:
      vmImage: 'windows-2019'
      demands:
      - MSBuild
      - vstest

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: $(DotNetVersion)
    - task: NuGetToolInstaller@1
      displayName: Use Nuget $(NugetVersion)
      inputs:
        versionSpec: $(NugetVersion)

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: MobCAT.sln

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: 'MobCAT.Test/MobCAT.Test.csproj'
        arguments: '--configuration $(BuildConfiguration)'

- stage: PackNugets
  jobs:
  - job: PackNugets
    pool:
        vmImage: 'windows-latest'
        demands:
        - MSBuild

    steps:
    - script: echo PackNuget the code!

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Pipeline.Workspace)/drop_mac'
        Contents: '**'
        TargetFolder: '$(Build.SourcesDirectory)'

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: $(DotNetVersion)

    - task: NuGetToolInstaller@1
      displayName: Use Nuget $(NugetVersion)
      inputs:
        versionSpec: $(NugetVersion)

    - task: Bash@3
      displayName: 'Version Script'
      inputs:
        targetType: 'inline'
        script: |
          echo '$(Build_BuildID)' $BUILD_BUILDID
                  BUILDNUMBER=$BUILD_BUILDID
                  VERSION=1.0.$BUILDNUMBER
                  echo 'VERSION ' $VERSION
                  
                  #if ! [ $BRANCH = master ]; then
                  #   VERSION=1.0.$BUILDNUMBER
                  #    echo "##vso[build.updatebuildnumber]$VERSION"
                  #fi;
                  
                  echo "##vso[task.setvariable variable=Version]$VERSION"

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack  MobCAT'
      inputs:
        command: pack
        packagesToPack: 'MobCAT/MobCAT.csproj'
        versioningScheme: byEnvVar
        versionEnvVar: VERSION

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack  MobCAT.Forms'
      inputs:
        command: pack
        packagesToPack: 'MobCAT.Forms/MobCAT.Forms.csproj'
        versioningScheme: byEnvVar
        versionEnvVar: VERSION

    - task: NuGetCommand@2
      displayName: 'NuGet pack  MobCAT.iOS'
      inputs:
        command: pack
        packagesToPack: 'MobCAT.iOS.nuspec'
        versioningScheme: byEnvVar
        versionEnvVar: VERSION

    - task: NuGetCommand@2
      displayName: 'NuGet pack  MobCAT.Android'
      inputs:
        command: pack
        packagesToPack: 'MobCAT.Android.nuspec'
        versioningScheme: byEnvVar
        versionEnvVar: VERSION

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack  MobCAT.Repository.SQLiteNet'
      inputs:
        command: pack
        packagesToPack: 'MobCAT.Repository.SQLiteNet/MobCAT.Repository.SQLiteNet.csproj'
        versioningScheme: byEnvVar
        versionEnvVar: VERSION

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack  MobCAT.Repository.EntityFrameworkCore'
      inputs:
        command: pack
        packagesToPack: 'MobCAT.Repository.EntityFrameworkCore/MobCAT.Repository.EntityFrameworkCore.csproj'
        versioningScheme: byEnvVar
        versionEnvVar: VERSION

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**\*.nupkg'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop_nuget'
        publishLocation: 'Container'

- stage: PublishNuget
  jobs:
  - job: PublishNuget
    pool:
        vmImage: 'windows-latest'
        demands:
        - MSBuild

    steps:
    - script: echo Publish Nuget Github the code!

    - task: Bash@3
      displayName: 'Version Script'
      inputs:
        targetType: 'inline'
        script: |
          echo '$(Build_BuildID)' $BUILD_BUILDID
                  BUILDNUMBER=$BUILD_BUILDID
                  VERSION=1.0.$BUILDNUMBER
                  echo 'VERSION ' $VERSION
                  
                  #if ! [ $BRANCH = master ]; then
                  #   VERSION=1.0.$BUILDNUMBER
                  #    echo "##vso[build.updatebuildnumber]$VERSION"
                  #fi;
                  
                  echo "##vso[task.setvariable variable=Version]$VERSION"

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop_nuget'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'XamCAT GitHub Connection'
        repositoryName: 'xamcat/mobcat-library'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'manual'
        tag: 'v$(VERSION)'
        title: 'v$(VERSION)'
        assets: '$(System.ArtifactsDirectory)/**/drop_nuget/*.nupkg'
        addChangeLog: false

    - task: NuGetCommand@2
      displayName: 'NuGet push'
      inputs:
        command: push
        packagesToPush: '$(System.ArtifactsDirectory)/**/drop_nuget/*.nupkg'
        nuGetFeedType: external
        publishFeedCredentials: GitHubPackageRelease
